"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LUser = void 0;
const FactoryData_1 = require("../../data/FactoryData");
const Administrator_1 = require("../../shared/entity/Administrator");
const Client_1 = require("../../shared/entity/Client");
const logicexception_1 = require("../../shared/exceptions/logicexception");
class LUser {
    constructor() { }
    static getInstance() {
        if (!LUser.instancia) {
            LUser.instancia = new LUser();
        }
        return LUser.instancia;
    }
    //Validations************************************
    validateIdCard(idcard) {
        var numbers = /^[0-9]+$/;
        if (!idcard.trim().match(numbers)) {
            throw new logicexception_1.LogicException("The identity card must have only numbers");
        }
        if (idcard.trim() === "") {
            throw new logicexception_1.LogicException("The identity card cannot be empty");
        }
    }
    validateLogin(username, password) {
        this.validateUserName(username);
        if (password.trim() === "") {
            throw new logicexception_1.LogicException("The password cannot be empty");
        }
    }
    validateUserName(username) {
        if (username.trim() === "") {
            throw new logicexception_1.LogicException("The username cannot be empty");
        }
    }
    async validateAddUser(dtuser) {
        if (dtuser == null) {
            throw new logicexception_1.LogicException("The User is empty ");
        }
        if (dtuser.completename.trim() === "") {
            throw new logicexception_1.LogicException("The complete name cannot be empty");
        }
        if (dtuser.password.trim() === "") {
            throw new logicexception_1.LogicException("The password cannot be empty");
        }
        if (dtuser instanceof Client_1.Client) {
            let client = dtuser;
            var numbers = /^[0-9]+$/;
            if (!client.creditcardnumber.trim().match(numbers)) {
                throw new logicexception_1.LogicException("The credit card number must have only numbers");
            }
            if (client.creditcardnumber.trim() === "") {
                throw new logicexception_1.LogicException("The credit card number cannot be empty");
            }
            if (client.shippingaddress.trim() === "") {
                throw new logicexception_1.LogicException("The shipping address cannot be empty");
            }
        }
        if (dtuser instanceof Administrator_1.Administrator) {
            let admin = dtuser;
            if (admin.position.trim() === "") {
                throw new logicexception_1.LogicException("The position cannot be empty");
            }
        }
        this.validateIdCard(dtuser.identitycard);
        this.validateUserName(dtuser.username);
        let idcardsearch = await this.getUser(dtuser.identitycard);
        if (idcardsearch != null) {
            throw new logicexception_1.LogicException("That User already exists in the system");
        }
        let usernamesearch = await this.getUserByusername(dtuser.username);
        if (usernamesearch != null) {
            throw new logicexception_1.LogicException("That User Name already exists in the system");
        }
    }
    async validateUpdateUser(dtuser) {
        if (dtuser == null) {
            throw new logicexception_1.LogicException("The User is empty ");
        }
        if (dtuser.completename.trim() === "") {
            throw new logicexception_1.LogicException("The complete name cannot be empty");
        }
        if (dtuser.password.trim() === "") {
            throw new logicexception_1.LogicException("The password cannot be empty");
        }
        if (dtuser instanceof Client_1.Client) {
            let client = dtuser;
            var numbers = /^[0-9]+$/;
            if (!client.creditcardnumber.trim().match(numbers)) {
                throw new logicexception_1.LogicException("The credit card number must have only numbers");
            }
            if (client.creditcardnumber.trim() === "") {
                throw new logicexception_1.LogicException("The credit card number cannot be empty");
            }
            if (client.shippingaddress.trim() === "") {
                throw new logicexception_1.LogicException("The shipping address cannot be empty");
            }
        }
        if (dtuser instanceof Administrator_1.Administrator) {
            let admin = dtuser;
            if (admin.position.trim() === "") {
                throw new logicexception_1.LogicException("The position cannot be empty");
            }
        }
        this.validateIdCard(dtuser.identitycard);
        let idcardsearch = await this.getUser(dtuser.identitycard);
        if (idcardsearch == null) {
            throw new logicexception_1.LogicException("That User does not exists in the system");
        }
    }
    async validateDeleteUser(dtuser) {
        if (dtuser == null) {
            throw new logicexception_1.LogicException("The User is empty ");
        }
        this.validateIdCard(dtuser.identitycard);
        let sobjcli = await this.getUser(dtuser.identitycard);
        if (sobjcli == null) {
            throw new logicexception_1.LogicException("That User does not exists in the system");
        }
    }
    //********************************************** */
    //USER
    async getUser(idcard) {
        this.validateIdCard(idcard);
        var suser;
        suser = await FactoryData_1.FactoryData.getDClient().getClient(idcard);
        if (suser == null) {
            suser = await FactoryData_1.FactoryData.getDAdmin().getAdmin(idcard);
        }
        return suser;
    }
    async getUserByusername(username) {
        this.validateUserName(username);
        var suser;
        suser = await FactoryData_1.FactoryData.getDClient().getClientbyusername(username);
        if (suser == null) {
            suser = await FactoryData_1.FactoryData.getDAdmin().getAdminbyusername(username);
        }
        return suser;
    }
    async addUser(dtuser) {
        await this.validateAddUser(dtuser);
        if (dtuser instanceof Client_1.Client) {
            FactoryData_1.FactoryData.getDClient().addClient(dtuser);
        }
        if (dtuser instanceof Administrator_1.Administrator) {
            FactoryData_1.FactoryData.getDAdmin().addAdmin(dtuser);
        }
    }
    async updateUser(dtuser) {
        await this.validateUpdateUser(dtuser);
        if (dtuser instanceof Client_1.Client) {
            FactoryData_1.FactoryData.getDClient().updateClient(dtuser);
        }
        if (dtuser instanceof Administrator_1.Administrator) {
            FactoryData_1.FactoryData.getDAdmin().updateAdmin(dtuser);
        }
    }
    async deleteUser(dtuser) {
        await this.validateDeleteUser(dtuser);
        if (dtuser instanceof Client_1.Client) {
            FactoryData_1.FactoryData.getDClient().deleteClient(dtuser);
        }
        if (dtuser instanceof Administrator_1.Administrator) {
            FactoryData_1.FactoryData.getDAdmin().deleteAdmin(dtuser);
        }
    }
    async loginUser(username, password) {
        this.validateLogin(username, password);
        var suser;
        suser = await FactoryData_1.FactoryData.getDClient().loginClient(username, password);
        if (suser == null) {
            suser = await FactoryData_1.FactoryData.getDAdmin().loginAdmin(username, password);
        }
        if (suser == null) {
            throw new logicexception_1.LogicException("Wrong username or password");
        }
        return suser;
    }
    async getClients() {
        var list = await FactoryData_1.FactoryData.getDClient().getClients();
        return list;
    }
    async getAdmins() {
        var list = await FactoryData_1.FactoryData.getDAdmin().getAdmins();
        return list;
    }
}
exports.LUser = LUser;
//# sourceMappingURL=LUser.js.map