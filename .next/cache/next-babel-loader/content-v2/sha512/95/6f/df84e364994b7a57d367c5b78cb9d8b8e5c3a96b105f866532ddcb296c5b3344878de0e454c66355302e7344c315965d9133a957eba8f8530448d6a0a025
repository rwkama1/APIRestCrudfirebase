{"ast":null,"code":"// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nexport default function initMiddleware(middleware) {\n  return function (req, res) {\n    return new Promise(function (resolve, reject) {\n      middleware(req, res, function (result) {\n        if (result instanceof Error) {\n          return reject(result);\n        }\n\n        return resolve(result);\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Waldemar/Desktop/ReactJS/APINextCrudfirebase/lib/init-middleware.js"],"names":["initMiddleware","middleware","req","res","Promise","resolve","reject","result","Error"],"mappings":"AAAA;AACA;AACA,eAAe,SAASA,cAAT,CAAwBC,UAAxB,EAAoC;AACjD,SAAO,UAACC,GAAD,EAAMC,GAAN;AAAA,WACL,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/BL,MAAAA,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAW,UAACI,MAAD,EAAY;AAC/B,YAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,iBAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AACD,eAAOF,OAAO,CAACE,MAAD,CAAd;AACD,OALS,CAAV;AAMD,KAPD,CADK;AAAA,GAAP;AASD","sourcesContent":["// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nexport default function initMiddleware(middleware) {\n  return (req, res) =>\n    new Promise((resolve, reject) => {\n      middleware(req, res, (result) => {\n        if (result instanceof Error) {\n          return reject(result)\n        }\n        return resolve(result)\n      })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}